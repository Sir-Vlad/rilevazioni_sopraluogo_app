-- I VALORI NULL RAPPRESENTANO CHE IL DATO NON È DISPONIBILE

PRAGMA FOREIGN_KEYS = ON;
PRAGMA JOURNAL_MODE = WAL;

BEGIN TRANSACTION;

-- EDIFICIO TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS EDIFICIO
(
    CHIAVE                TEXT PRIMARY KEY,
    FASCICOLO             TEXT NOT NULL,
    INDIRIZZO             TEXT NOT NULL,
    ANNO_COSTRUZIONE      DATE    DEFAULT NULL,
    ANNO_RIQUALIFICAZIONE DATE    DEFAULT NULL,
    NOTE_RIQUALIFICAZIONE TEXT    DEFAULT NULL,
    ISOLAMENTO_TETTO      BOOLEAN DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS ANNOTAZIONE_EDIFICIO
(
    ID          INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_EDIFICIO TEXT REFERENCES EDIFICIO (CHIAVE),
    CONTENT     TEXT     NOT NULL CHECK ( length(CONTENT) > 0 ),
    DATA        DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- FOTOVOLTAICO TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS FOTOVOLTAICO
(
    ID           INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_EDIFICIO  TEXT REFERENCES EDIFICIO (CHIAVE),
    POTENZA      REAL NOT NULL CHECK ( POTENZA >= 0 ),
    PROPRIETARIO TEXT NOT NULL
);

-- UTENZE TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS UTENZE
(
    ID                  INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_EDIFICIO         TEXT NOT NULL REFERENCES EDIFICIO (CHIAVE),
    TIPO                TEXT NOT NULL CHECK ( TIPO IN ('acqua', 'calore', 'elettricità') ),
    COD_CONTATORE       TEXT NOT NULL,
    INDIRIZZO_CONTATORE TEXT
);

-- STANZA TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS STANZA
(
    ID               INTEGER PRIMARY KEY AUTOINCREMENT,
    CHIAVE           TEXT NOT NULL REFERENCES EDIFICIO (CHIAVE),
    PIANO            TEXT NOT NULL,
    ID_SPAZIO        TEXT NOT NULL,
    STANZA           TEXT NOT NULL,
    DESTINAZIONE_USO TEXT NOT NULL,
    ALTEZZA          INTEGER CHECK ( ALTEZZA >= 0 )       DEFAULT 0,
    SPESSORE_MURO    INTEGER CHECK ( SPESSORE_MURO >= 0 ) DEFAULT 0,
    RISCALDAMENTO    TEXT                                 DEFAULT NULL REFERENCES CLIMATIZZAZIONE (CLIMATIZZAZIONE),
    RAFFRESCAMENTO   TEXT                                 DEFAULT NULL REFERENCES CLIMATIZZAZIONE (CLIMATIZZAZIONE),
    ILLUMINAZIONE    TEXT                                 DEFAULT NULL REFERENCES ILLUMINAZIONE (LAMPADINA),
    UNIQUE (CHIAVE, ID_SPAZIO, STANZA, DESTINAZIONE_USO)
);

CREATE INDEX IF NOT EXISTS STANZA_IDX ON STANZA (STANZA);

-- ANNOTAZIONE_STANZA TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS ANNOTAZIONE_STANZA
(
    ID        INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_STANZA INTEGER  NOT NULL REFERENCES STANZA (ID),
    CONTENT   TEXT     NOT NULL CHECK ( LENGTH(CONTENT > 0) ),
    DATA      DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- INFISSO TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS INFISSO
(
    ID        TEXT PRIMARY KEY,
    TIPO      TEXT    NOT NULL CHECK ( TIPO IN ('PORTA', 'FINESTRA') ) DEFAULT 'FINESTRA',
    ALTEZZA   INTEGER NOT NULL CHECK ( ALTEZZA >= 0 ),
    LARGHEZZA INTEGER NOT NULL CHECK ( LARGHEZZA >= 0 ),
    MATERIALE TEXT    NOT NULL REFERENCES MATERIALE_INFISSO (MATERIALE),
    VETRO     TEXT    NOT NULL REFERENCES VETRO_INFISSO (VETRO),
    MQ        INTEGER GENERATED ALWAYS AS (ALTEZZA * LARGHEZZA) VIRTUAL
);

-- ANNOTAZIONE_INFISSO TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS ANNOTAZIONE_INFISSO
(
    ID         INTEGER PRIMARY KEY AUTOINCREMENT,
    ID_INFISSO TEXT     NOT NULL REFERENCES INFISSO (ID),
    CONTENT    TEXT     NOT NULL,
    DATA       DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- STANZE_CON_INFISSI TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS STANZA_CON_INFISSI
(
    ID_INFISSO  TEXT    NOT NULL REFERENCES INFISSO (ID),
    ID_STANZA   INTEGER NOT NULL REFERENCES STANZA (ID),
    NUM_INFISSI INTEGER NOT NULL DEFAULT 1 CHECK ( NUM_INFISSI > 0 ),
    PRIMARY KEY (ID_INFISSO, ID_STANZA)
);

-- MATERIALE_INFISSO TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS MATERIALE_INFISSO
(
    ID                    INTEGER PRIMARY KEY AUTOINCREMENT,
    MATERIALE             TEXT    NOT NULL UNIQUE COLLATE NOCASE,
    EFFICIENZA_ENERGETICA INTEGER NOT NULL
);

-- VETRO_INFISSO TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS VETRO_INFISSO
(
    ID                    INTEGER PRIMARY KEY AUTOINCREMENT,
    VETRO                 TEXT    NOT NULL UNIQUE COLLATE NOCASE,
    EFFICIENZA_ENERGETICA INTEGER NOT NULL
);

-- CLIMATIZZAZIONE TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS CLIMATIZZAZIONE
(
    ID                    INTEGER PRIMARY KEY AUTOINCREMENT,
    CLIMATIZZAZIONE       TEXT    NOT NULL UNIQUE COLLATE NOCASE,
    EFFICIENZA_ENERGETICA INTEGER NOT NULL
);

-- ILLUMINAZIONE TABLE IF NOT EXISTS
CREATE TABLE IF NOT EXISTS ILLUMINAZIONE
(
    ID                    INTEGER PRIMARY KEY AUTOINCREMENT,
    LAMPADINA             TEXT    NOT NULL UNIQUE COLLATE NOCASE,
    EFFICIENZA_ENERGETICA INTEGER NOT NULL
);

-- VIEW PER LA VISUALIZZAZIONE PER STANZA DEI METRI QUADRATI DI INFISSI
CREATE VIEW IF NOT EXISTS MQ_INFISSI AS
SELECT SI.ID_STANZA, SUM(I.MQ * SI.NUM_INFISSI) AS 'MQ_INFISSI'
FROM INFISSO AS I
         JOIN STANZA_CON_INFISSI AS SI ON I.ID = SI.ID_INFISSO
GROUP BY SI.ID_STANZA;

-- VIEW PER LA VISUALIZZAZIONE PER STANZA DEL MATERIALE MENO EFFICIENTE
CREATE VIEW IF NOT EXISTS MATERIALE_MENO_EFFICIENTE_STANZA AS
SELECT SI.ID_STANZA, MI.MATERIALE
FROM STANZA AS S
         JOIN STANZA_CON_INFISSI AS SI ON S.ID = SI.ID_STANZA
         JOIN INFISSO AS I ON SI.ID_INFISSO = I.ID
         JOIN MATERIALE_INFISSO AS MI ON I.MATERIALE = MI.MATERIALE
WHERE MI.EFFICIENZA_ENERGETICA IN (
                                  SELECT MIN(MI2.EFFICIENZA_ENERGETICA)
                                  FROM STANZA_CON_INFISSI AS SI
                                           JOIN INFISSO AS I2 ON SI.ID_INFISSO = I2.ID
                                           JOIN MATERIALE_INFISSO AS MI2 ON I2.MATERIALE = MI2.MATERIALE
                                  WHERE SI.ID_STANZA = S.ID)
GROUP BY SI.ID_STANZA, MI.MATERIALE;

-- VIEW PER LA VISUALIZZAZIONE PER STANZA DEL VETRO MENO EFFICIENTE
CREATE VIEW IF NOT EXISTS VETRO_MENO_EFFICIENTE_STANZA AS
SELECT SI.ID_STANZA, MI.VETRO
FROM STANZA AS S
         JOIN STANZA_CON_INFISSI AS SI ON S.ID = SI.ID_STANZA
         JOIN INFISSO AS I ON SI.ID_INFISSO = I.ID
         JOIN VETRO_INFISSO AS MI ON I.VETRO = MI.VETRO
WHERE MI.EFFICIENZA_ENERGETICA IN (
                                  SELECT MIN(MI2.EFFICIENZA_ENERGETICA)
                                  FROM STANZA_CON_INFISSI AS SI
                                           JOIN INFISSO AS I2 ON SI.ID_INFISSO = I2.ID
                                           JOIN VETRO_INFISSO AS MI2 ON I2.VETRO = MI2.VETRO
                                  WHERE SI.ID_STANZA = S.ID)
GROUP BY SI.ID_STANZA, MI.VETRO;

-- VIEW PER LA VISUALLIZZAIONE DEI DATI CORRELLATI ALLE STANZE
CREATE VIEW IF NOT EXISTS DATI_STANZE AS
SELECT S.ID, E.FASCICOLO, S.CHIAVE, S.PIANO, S.ID_SPAZIO, S.STANZA, S.DESTINAZIONE_USO,
       S.ALTEZZA, S.SPESSORE_MURO,
       S.RISCALDAMENTO, S.RAFFRESCAMENTO, S.ILLUMINAZIONE, coalesce(DGS.MQ_INFISSI, 0) AS MQ_INFISSI,
       DGS.MATERIALE,
       DGS.VETRO
FROM STANZA AS S
         JOIN EDIFICIO AS E ON E.CHIAVE = S.CHIAVE
    -- Aggiungo i dati degli infissi alle stanze che c'è li hanno
         LEFT JOIN (
                   -- Recupero i dati delle stanze che hanno degli infissi
                   SELECT MQ.ID_STANZA, MQ.MQ_INFISSI, M.MATERIALE, V.VETRO
                   FROM MQ_INFISSI AS MQ
                            JOIN MATERIALE_MENO_EFFICIENTE_STANZA AS M ON MQ.ID_STANZA = M.ID_STANZA
                            JOIN VETRO_MENO_EFFICIENTE_STANZA AS V ON M.ID_STANZA = v.ID_STANZA) AS DGS
                   ON S.ID = DGS.ID_STANZA;

COMMIT;